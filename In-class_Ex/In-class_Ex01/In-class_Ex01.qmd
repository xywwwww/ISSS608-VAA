---
title: "In-class_Ex01"
author: "Wan xinyu"
---

# Getting started

1.  Using p_load() of pacman package to load tidyverse on

```{r}
pacman::p_load(tidyverse)
```

2.Importing data

```{r}
exam_data<- read_csv("data/Exam_data.csv")
```

## Working with theme

plot a horizontal bar chart looks similar to the figure below.

-   Changing the colors of the plot panel background of theme_minimal() to light blue and the color of the grid lines to white.

::: panel-tabset
## The plot

```{r}
#| echo: false
knitr::include_graphics("try.png")
```

## The code chunk

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
ggplot(data=exam_data, aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "lightblue", colour = "lightblue", 
                                    size = 0.5, linetype = "solid"),
    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"), 
    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = "white"))
```
:::

# Designing Data-drive graphics for analysis I

## The original design

A simple vertical bar chart for frequency analysis. Critics:

-   y-axis is not clear (i.e. count)

-   To support effective comparison , the bars should be sorted by their respective frequencies.

-   For static graph, frequency values should be added to provide addition information

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = RACE)) +
  geom_bar()
```

::: panel-tabset
## The makeover design

With references to the critics on the earlier slide, create a makeover looks similar to the figure on the above.

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=reorder(RACE,RACE,
                     function(x)-length(x)))) +
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

## The code chunk

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
ggplot(data=exam_data, 
       aes(x=reorder(RACE,RACE,
                     function(x)-length(x)))) +
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```
:::

This code chunk uses fct_infreq() of forcats package

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false

exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))


```

# Designing Data-drive Graphics for Analysis II

## The original design

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram()
```

::: panel-tabset
## The makeover design

-   Adding mean and median lines on the histogram plot.
-   Change fill color and line color

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=1) +
  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),
             color="grey30",
             linetype="dashed", 
             size=1)
```

## The code chunk

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=1) +
  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),
             color="grey30",
             linetype="dashed", 
             size=1)
```
:::

# Designing Data-drive Graphics for Analysis III

## The original design

The histogram on the left are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils

```{r}
d <- exam_data

ggplot(d, aes(x = ENGLISH)) +
  geom_histogram(data = d) +
  facet_wrap(~ GENDER) +
  theme_bw()
```

::: panel-tabset
## The makeover design

```{r}
#| echo: false
d <- exam_data   
d_bg <- d[, -3]  

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +  
  theme_bw()
```

## The code

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
d <- exam_data   
d_bg <- d[, -3]  

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +  
  theme_bw()
```
:::

# Designing Data-drive Graphics for Analysis IV

## The original design.

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() 
```

::: panel-tabset
## The makeover design

Create a makeover looks similar to the figure on the below

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  geom_hline(yintercept=50,
             linetype="dashed",
             color="grey60",
             size=1) + 
  geom_vline(xintercept=50, 
             linetype="dashed",
             color="grey60",
             size=1)
```

## The code chunk

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  geom_hline(yintercept=50,
             linetype="dashed",
             color="grey60",
             size=1) + 
  geom_vline(xintercept=50, 
             linetype="dashed",
             color="grey60",
             size=1)
```
:::

All credits of this in-class exercise goes to [DR. Kam Tin Seong](https://faculty.smu.edu.sg/profile/kam-tin-seong-486)
