[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loaading-the-reuqired-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loaading-the-reuqired-libraries",
    "title": "Hands-on_Ex02",
    "section": "2.2.1 Installing and loaading the reuqired libraries",
    "text": "2.2.1 Installing and loaading the reuqired libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2. Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on_Ex02",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Ex02",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on_Ex02",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on_Ex02",
    "section": "2.5.1 Creating composite Graphics : pathwork methods",
    "text": "2.5.1 Creating composite Graphics : pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n(p1/p2)| p3\n\n\n\n\nTo learn more about,refer to plot assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Ex02",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#create-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#create-figure-with-insert",
    "title": "Hands-on_Ex02",
    "section": "2.5.5 Create figure with insert",
    "text": "2.5.5 Create figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\np12 <- p1|p2\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-byusing-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-byusing-patchwork-and-ggtheme",
    "title": "Hands-on_Ex02",
    "section": "2.5.6 Creating a composite figure byusing patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure byusing patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands_on_Ex03.2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands_on_Ex03.2.html",
    "title": "Hands-on_Ex03.2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"Hands-on_Ex03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\nWarning: `mutate_each_()` was deprecated in dplyr 0.7.0.\nℹ Please use `across()` instead.\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_()/exit_() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\nThe animated bubble chart\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg <- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] <- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\nAll credits of this hands on exercise goes to Dr. Kam Tin Seong"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands_on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands_on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure. The code chunk below will be used to accomplish the task.\n\n\npacman::p_load(ggplot2, ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements. If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\n\n\nNote\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip <- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\n\n\nNote\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\nNotice that the background colour of the tooltip is white and the font colour is black and bold.\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\nNote\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n\n#|eval : false\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n#|echo : false\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n::: {.callout-note title = “Info”}\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS. :::\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n::: {.callout-note title = “Info”} Interactivity: Web document link with a data object will be displayed on the web browser upon mouse click. :::\n\n\n\n\n\n\n::: {.callout-warning title = “Info”} Interactivity: Web document link with a data object will be displayed on the web browser upon mouse click. :::\n\n\n\nCoordinated multiple views methods has been implemented in the data visualization below.\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n There are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code\n\n\n\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd <- highlight_key(exam_data)\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk,\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via thislink.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and - Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\nAll credits of this hands on exercise goes to Dr Kam Tin Seong"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class_Ex01",
    "section": "",
    "text": "Using p_load() of pacman package to load tidyverse on\n\n\npacman::p_load(tidyverse)\n\n2.Importing data\n\nexam_data<- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nplot a horizontal bar chart looks similar to the figure below.\n\nChanging the colors of the plot panel background of theme_minimal() to light blue and the color of the grid lines to white.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour = \"lightblue\", \n                                    size = 0.5, linetype = \"solid\"),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"white\"), \n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"white\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design",
    "title": "In-class_Ex01",
    "section": "The original design",
    "text": "The original design\nA simple vertical bar chart for frequency analysis. Critics:\n\ny-axis is not clear (i.e. count)\nTo support effective comparison , the bars should be sorted by their respective frequencies.\nFor static graph, frequency values should be added to provide addition information\n\n\n\n\n\n\n\nThe makeover designThe code chunk\n\n\nWith references to the critics on the earlier slide, create a makeover looks similar to the figure on the above.\n\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=reorder(RACE,RACE,\n                     function(x)-length(x)))) +\n  geom_bar() +\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\nThis code chunk uses fct_infreq() of forcats package\n\n\nShow the code\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-1",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-1",
    "title": "In-class_Ex01",
    "section": "The original design",
    "text": "The original design\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nThe makeover designThe code chunk\n\n\n\nAdding mean and median lines on the histogram plot.\nChange fill color and line color\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=1) +\n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-2",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-2",
    "title": "In-class_Ex01",
    "section": "The original design",
    "text": "The original design\nThe histogram on the left are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils\n\nd <- exam_data\n\nggplot(d, aes(x = ENGLISH)) +\n  geom_histogram(data = d) +\n  facet_wrap(~ GENDER) +\n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nThe makeover designThe code\n\n\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nShow the code\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design.",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design.",
    "title": "In-class_Ex01",
    "section": "The original design.",
    "text": "The original design.\n\n\n\n\n\n\nThe makeover designThe code chunk\n\n\nCreate a makeover looks similar to the figure on the below\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)\n\n\n\n\n\nAll credits of this in-class exercise goes to DR. Kam Tin Seong"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.\nIn this website you will find my coursework prepared for this course."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "hello world"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "The purpose of this take home exercise is to to reveal the demographic and financial characteristics of the city of Engagement, using appropriate static and interactive statistical graphics methods. This exercise requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#installing-the-data-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#installing-the-data-packages",
    "title": "Take-home_Ex01",
    "section": "2.1 Installing the data packages",
    "text": "2.1 Installing the data packages\n\npacman::p_load(ggplot2, ggiraph, plotly, \n               patchwork, DT, tidyverse,\n               ggrepel, ggthemes, hrbrthemes,\n               tidyverse) \n\nThe unzipped files have been saved into a new folder named data for better organization.\n\npart_info <- read_csv(\"data/Participants.csv\")\n\nRows: 1011 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): educationLevel, interestGroup\ndbl (4): participantId, householdSize, age, joviality\nlgl (1): haveKids\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nParticipants.csv\nContains information about the residents of City of Engagement that have agreed to participate in this study.\n\nparticipantId (integer): unique ID assigned to each participant.\nhouseholdSize (integer): the number of people in the participant’s household\nhaveKids (boolean): whether there are children living in the participant’s household.\nage (integer): participant’s age in years at the start of the study.\neducationLevel (string factor): the participant’s education level, one of: {“Low”, “HighSchoolOrCollege”, “Bachelors”, “Graduate”}\ninterestGroup (char): a char representing the participant’s stated primary interest group, one of {“A”, “B”, “C”, “D”, “E”, “F”, “G”, “H”, “I”, “J”}. Note: specific topics of interest have been redacted to avoid bias.\njoviality (float): a value ranging from [0,1] indicating the participant’s overall happiness level at the start of the study.\n\n\nfinance <- read_csv(\"data/FinancialJournal.csv\")\n\nRows: 1513636 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): category\ndbl  (2): participantId, amount\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFinancialJournal.csv\nContains information about financial transactions.\n\nparticipantId (integer): unique ID corresponding to the participant affected\ntimestamp (datetime): the time when the check-in was logged\ncategory (string factor): a string describing the expense category, one of {“Education”, “Food”, “Recreation”, “RentAdjustment”, “Shelter”, “Wage”}\namount (double): the amount of the transaction For explanation of Rent Adjustment, please refer to this link\n\nLets first examine the properties of the participants csv file.\n\nQuick peekDataset structureSummaryFurther details on category variable\n\n\n\nhead(part_info)\n\n# A tibble: 6 × 7\n  participantId householdSize haveKids   age educationLevel      interestGroup\n          <dbl>         <dbl> <lgl>    <dbl> <chr>               <chr>        \n1             0             3 TRUE        36 HighSchoolOrCollege H            \n2             1             3 TRUE        25 HighSchoolOrCollege B            \n3             2             3 TRUE        35 HighSchoolOrCollege A            \n4             3             3 TRUE        21 HighSchoolOrCollege I            \n5             4             3 TRUE        43 Bachelors           H            \n6             5             3 TRUE        32 HighSchoolOrCollege D            \n# ℹ 1 more variable: joviality <dbl>\n\n\n\n\n\nstr(part_info)\n\nspc_tbl_ [1,011 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId : num [1:1011] 0 1 2 3 4 5 6 7 8 9 ...\n $ householdSize : num [1:1011] 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: chr [1:1011] \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   householdSize = col_double(),\n  ..   haveKids = col_logical(),\n  ..   age = col_double(),\n  ..   educationLevel = col_character(),\n  ..   interestGroup = col_character(),\n  ..   joviality = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\n\n\n\nsummary(part_info[, c(\"householdSize\", \"haveKids\", \"age\", \"educationLevel\", \"interestGroup\", \"joviality\")])\n\n householdSize    haveKids            age        educationLevel    \n Min.   :1.000   Mode :logical   Min.   :18.00   Length:1011       \n 1st Qu.:1.000   FALSE:710       1st Qu.:29.00   Class :character  \n Median :2.000   TRUE :301       Median :39.00   Mode  :character  \n Mean   :1.964                   Mean   :39.07                     \n 3rd Qu.:3.000                   3rd Qu.:50.00                     \n Max.   :3.000                   Max.   :60.00                     \n interestGroup        joviality       \n Length:1011        Min.   :0.000204  \n Class :character   1st Qu.:0.240074  \n Mode  :character   Median :0.477539  \n                    Mean   :0.493794  \n                    3rd Qu.:0.746819  \n                    Max.   :0.999234  \n\n\n\n\n\ntable(part_info$interestGroup)\n\n\n  A   B   C   D   E   F   G   H   I   J \n102  91 102  96  83 106 108 111  96 116 \n\ntable(part_info$educationLevel)\n\n\n          Bachelors            Graduate HighSchoolOrCollege                 Low \n                232                 170                 525                  84 \n\n\n\n\n\n\nCheck for missing valuesCheck for outlier\n\n\n\nsum(is.na(part_info))\n\n[1] 0\n\n\n\n\nNext we will visualize some variables in document to see if there are any anomalies. From the chart below, we see that there exist no participants with extremely large age or low\n\np1 <- ggplot(part_info, aes(x = age)) +\n  geom_bar() +\n  labs(title = \"Distribution of Participants' Age\",\n       x = \"Age\",\n       y = \"No. of person\")\n\nfig <- ggplotly(p1)\n\nfig <- fig %>% \n  layout(xaxis = list(title = 'Age'), \n         yaxis = list(title = 'No. of person'))\n\n\np2 <- ggplot(part_info, aes(x = householdSize)) +\n  geom_bar() +\n  labs(title = \"Distribution of house hold size\",\n       x = \"Household size\",\n       y = \"Count\")\n\nfig2 <- ggplotly(p2)\n\nfig2 <- fig2 %>% \n  layout(xaxis = list(title = 'Household size'), \n         yaxis = list(title = 'Count'))\n\n\n\nfig3 <- subplot(fig, fig2, nrows = 1, titleY = TRUE, titleX = TRUE, margin = 0.1 ) %>%\n  layout(title = 'Outlier checking',\n         plot_bgcolor='#e5ecf6', \n         xaxis = list( \n           zerolinecolor = '#ffff', \n           zerolinewidth = 2, \n           gridcolor = 'ffff'), \n         yaxis = list( \n           zerolinecolor = '#ffff', \n           zerolinewidth = 2, \n           gridcolor = 'ffff')) %>%\n  \n  layout(annotations = list(\n      list(\n        x = 0.2,  \n        y = 1.0,  \n        text = \"Distribution of Participants' Age\",  \n        xref = \"paper\",  \n        yref = \"paper\",  \n        xanchor = \"center\",  \n        yanchor = \"bottom\",  \n        showarrow = FALSE \n      ),\n      list(\n        x = 0.8,  \n        y = 1.0,  \n        text = \"Distribution of house hold size\",  \n        xref = \"paper\",  \n        yref = \"paper\",  \n        xanchor = \"center\",  \n        yanchor = \"bottom\",  \n        showarrow = FALSE \n      )\n    ))\n\nfig3\n\n\n\n\n\n\n\n\nLets move on to examine the properties of the finance csv file.\n\nQuick peakDataset structureSummaryFurther examination of categorical variable\n\n\nSneak peak of the first few entries in the dataset\n\nhead(finance)\n\n# A tibble: 6 × 4\n  participantId timestamp           category  amount\n          <dbl> <dttm>              <chr>      <dbl>\n1             0 2022-03-01 00:00:00 Wage      2473. \n2             0 2022-03-01 00:00:00 Shelter   -555. \n3             0 2022-03-01 00:00:00 Education  -38.0\n4             1 2022-03-01 00:00:00 Wage      2047. \n5             1 2022-03-01 00:00:00 Shelter   -555. \n6             1 2022-03-01 00:00:00 Education  -38.0\n\n\n\n\n\nstr(finance)\n\nspc_tbl_ [1,513,636 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId: num [1:1513636] 0 0 0 1 1 1 2 2 2 3 ...\n $ timestamp    : POSIXct[1:1513636], format: \"2022-03-01\" \"2022-03-01\" ...\n $ category     : chr [1:1513636] \"Wage\" \"Shelter\" \"Education\" \"Wage\" ...\n $ amount       : num [1:1513636] 2473 -555 -38 2047 -555 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   timestamp = col_datetime(format = \"\"),\n  ..   category = col_character(),\n  ..   amount = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\n\n\n\nsummary(finance[c(\"amount\")])\n\n     amount         \n Min.   :-1562.726  \n 1st Qu.:   -5.594  \n Median :   -4.000  \n Mean   :   20.047  \n 3rd Qu.:   21.598  \n Max.   : 4096.526  \n\n\n\n\n\ntable(finance$category)\n\n\n     Education           Food     Recreation RentAdjustment        Shelter \n          3319         790051         296013            131          11463 \n          Wage \n        412659 \n\n\n\n\n\n\nCheck for missing valuesCheck for outliers\n\n\n\nsum(is.na(finance))\n\n[1] 0\n\n\n\n\nCheck for outlier in the amount variable. We first group the amount variables by the category. Then we do a box plot. From the chart we can observe that shelter has some abnormally small values to the negative end and wages has some exceptionally large values on the positive end. We may wish to take note of these in our analysis.\n\n# Create a box plot of amount by category\nggplotly(ggplot(finance, aes(x = category, y = amount, fill = category)) +\n  geom_boxplot() +\n  xlab(\"Expense Category\") +\n  ylab(\"Amount\") +\n  ggtitle(\"Amount Spent by Expense Category\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#check-for-missing-values-and-outliers",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#check-for-missing-values-and-outliers",
    "title": "Take-home_Ex01",
    "section": "Check for missing values and outliers",
    "text": "Check for missing values and outliers\n\nsum(is.na(part_info))\n\n[1] 0\n\nsum(is.na(finance))\n\n[1] 0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#quick-peek",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#quick-peek",
    "title": "Take-home_Ex01",
    "section": "Quick peek",
    "text": "Quick peek\n\nhead(part_info)\n\n# A tibble: 6 × 7\n  participantId householdSize haveKids   age educationLevel      interestGroup\n          <dbl>         <dbl> <lgl>    <dbl> <chr>               <chr>        \n1             0             3 TRUE        36 HighSchoolOrCollege H            \n2             1             3 TRUE        25 HighSchoolOrCollege B            \n3             2             3 TRUE        35 HighSchoolOrCollege A            \n4             3             3 TRUE        21 HighSchoolOrCollege I            \n5             4             3 TRUE        43 Bachelors           H            \n6             5             3 TRUE        32 HighSchoolOrCollege D            \n# ℹ 1 more variable: joviality <dbl>"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#dataset-structure",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#dataset-structure",
    "title": "Take-home_Ex01",
    "section": "Dataset structure",
    "text": "Dataset structure\n\nstr(part_info)\n\nspc_tbl_ [1,011 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId : num [1:1011] 0 1 2 3 4 5 6 7 8 9 ...\n $ householdSize : num [1:1011] 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: chr [1:1011] \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   householdSize = col_double(),\n  ..   haveKids = col_logical(),\n  ..   age = col_double(),\n  ..   educationLevel = col_character(),\n  ..   interestGroup = col_character(),\n  ..   joviality = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#summary",
    "title": "Take-home_Ex01",
    "section": "Summary",
    "text": "Summary\n\nsummary(part_info[, c(\"householdSize\", \"haveKids\", \"age\", \"educationLevel\", \"interestGroup\", \"joviality\")])\n\n householdSize    haveKids            age        educationLevel    \n Min.   :1.000   Mode :logical   Min.   :18.00   Length:1011       \n 1st Qu.:1.000   FALSE:710       1st Qu.:29.00   Class :character  \n Median :2.000   TRUE :301       Median :39.00   Mode  :character  \n Mean   :1.964                   Mean   :39.07                     \n 3rd Qu.:3.000                   3rd Qu.:50.00                     \n Max.   :3.000                   Max.   :60.00                     \n interestGroup        joviality       \n Length:1011        Min.   :0.000204  \n Class :character   1st Qu.:0.240074  \n Mode  :character   Median :0.477539  \n                    Mean   :0.493794  \n                    3rd Qu.:0.746819  \n                    Max.   :0.999234  \n\n\nFurther details on category variable\n\ntable(part_info$interestGroup)\n\n\n  A   B   C   D   E   F   G   H   I   J \n102  91 102  96  83 106 108 111  96 116 \n\ntable(part_info$educationLevel)\n\n\n          Bachelors            Graduate HighSchoolOrCollege                 Low \n                232                 170                 525                  84 \n\n\n:::\n\nCheck for missing valuesCheck for outlier\n\n\n\nsum(is.na(part_info))\n\n[1] 0\n\n\n\n\nNext we will visualize some variables in document to see if there are any anomalies. From the chart below, we see that there exist no participants with extremely large age or low\n\np1 <- ggplot(part_info, aes(x = age)) +\n  geom_bar() +\n  labs(title = \"Distribution of Participants' Age\",\n       x = \"Age\",\n       y = \"No. of person\")\n\nfig <- ggplotly(p1)\n\nfig <- fig %>% \n  layout(xaxis = list(title = 'Age'), \n         yaxis = list(title = 'No. of person'))\n\n\np2 <- ggplot(part_info, aes(x = householdSize)) +\n  geom_bar() +\n  labs(title = \"Distribution of house hold size\",\n       x = \"Household size\",\n       y = \"Count\")\n\nfig2 <- ggplotly(p2)\n\nfig2 <- fig2 %>% \n  layout(xaxis = list(title = 'Household size'), \n         yaxis = list(title = 'Count'))\n\n\n\nfig3 <- subplot(fig, fig2, nrows = 1, titleY = TRUE, titleX = TRUE, margin = 0.1 ) %>%\n  layout(title = 'Outlier checking',\n         plot_bgcolor='#e5ecf6', \n         xaxis = list( \n           zerolinecolor = '#ffff', \n           zerolinewidth = 2, \n           gridcolor = 'ffff'), \n         yaxis = list( \n           zerolinecolor = '#ffff', \n           zerolinewidth = 2, \n           gridcolor = 'ffff')) %>%\n  \n  layout(annotations = list(\n      list(\n        x = 0.2,  \n        y = 1.0,  \n        text = \"Distribution of Participants' Age\",  \n        xref = \"paper\",  \n        yref = \"paper\",  \n        xanchor = \"center\",  \n        yanchor = \"bottom\",  \n        showarrow = FALSE \n      ),\n      list(\n        x = 0.8,  \n        y = 1.0,  \n        text = \"Distribution of house hold size\",  \n        xref = \"paper\",  \n        yref = \"paper\",  \n        xanchor = \"center\",  \n        yanchor = \"bottom\",  \n        showarrow = FALSE \n      )\n    ))\n\nfig3\n\n\n\n\n\n\n\n\nLets move on to examine the properties of the finance csv file.\n\nQuick peakDataset structureSummaryFurther examination of categorical variableCheck for missing valuesCheck for outliers\n\n\nSneak peak of the first few entries in the dataset\n\nhead(finance)\n\n# A tibble: 6 × 4\n  participantId timestamp           category  amount\n          <dbl> <dttm>              <chr>      <dbl>\n1             0 2022-03-01 00:00:00 Wage      2473. \n2             0 2022-03-01 00:00:00 Shelter   -555. \n3             0 2022-03-01 00:00:00 Education  -38.0\n4             1 2022-03-01 00:00:00 Wage      2047. \n5             1 2022-03-01 00:00:00 Shelter   -555. \n6             1 2022-03-01 00:00:00 Education  -38.0\n\n\n\n\n\nstr(finance)\n\nspc_tbl_ [1,513,636 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId: num [1:1513636] 0 0 0 1 1 1 2 2 2 3 ...\n $ timestamp    : POSIXct[1:1513636], format: \"2022-03-01\" \"2022-03-01\" ...\n $ category     : chr [1:1513636] \"Wage\" \"Shelter\" \"Education\" \"Wage\" ...\n $ amount       : num [1:1513636] 2473 -555 -38 2047 -555 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   timestamp = col_datetime(format = \"\"),\n  ..   category = col_character(),\n  ..   amount = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\n\n\n\nsummary(finance[c(\"amount\")])\n\n     amount         \n Min.   :-1562.726  \n 1st Qu.:   -5.594  \n Median :   -4.000  \n Mean   :   20.047  \n 3rd Qu.:   21.598  \n Max.   : 4096.526  \n\n\n\n\n\ntable(finance$category)\n\n\n     Education           Food     Recreation RentAdjustment        Shelter \n          3319         790051         296013            131          11463 \n          Wage \n        412659 \n\n\n\n\n\nsum(is.na(finance))\n\n[1] 0\n\n\n\n\nCheck for outlier in the amount variable. We first group the amount variables by the category. Then we do a box plot. From the chart we can observe that shelter has some abnormally small values to the negative end and wages has some exceptionally large values on the positive end. We may wish to take note of these in our analysis.\n\n# Create a box plot of amount by category\nggplotly(ggplot(finance, aes(x = category, y = amount, fill = category)) +\n  geom_boxplot() +\n  xlab(\"Expense Category\") +\n  ylab(\"Amount\") +\n  ggtitle(\"Amount Spent by Expense Category\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\nexam_data<- read_csv(\"data/Exam_data.csv\")\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample = ENGLISH)) +\n  stat_qq() + \n  stat_qq_line()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that the points deviates significantly from the straight diagonal line. This is a clear indication that the set of data is not normally distributed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#exploring-financial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#exploring-financial-data",
    "title": "Take-home_Ex01",
    "section": "3.2 Exploring financial data",
    "text": "3.2 Exploring financial data\nNext we move on to explore variables in the financial data. Since every participant can have multiple entries. We will explore the data by grouping the entries according the participant’s Id and the category\nLets first take a look at the sum residents expenditure by category\n\n# Aggregate financial data by participant\nfinancial_data_agg <- finance %>%\n  group_by(participantId,category) %>%\n  summarize(total = sum(amount), .groups = \"drop\")\n\n# Financial summary\nexpenses_summary <- financial_data_agg %>%\n  group_by(category) %>%\n  summarize(total = sum(total))\n\n# Bar chart of expenses by category\nexpenses_plot <- ggplot(expenses_summary, aes(x = category, y = total)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(x = \"Expense Category\", y = \"Total Amount Spent\", title = \"Expenses by Category\") +\n  theme_minimal()\nggplotly(expenses_plot)\n\n\n\n\n\nIn the chart above we realize wage is counted as part of expenditure We will remove wage since it is not exactly an expense that we will be looking at.\n\n# Aggregate financial data by participant\nfinancial_data_agg <- finance %>%\n   filter(category != \"Wage\") %>%\n  group_by(participantId, category) %>%\n  summarize(total = sum(amount), .groups = \"drop\")\n\n# Financial summary\nexpenses_summary <- financial_data_agg %>%\n  group_by(category) %>%\n  summarize(total = sum(total))\n\n# Bar chart of expenses by category\nexpenses_plot1 <- ggplot(expenses_summary, aes(x = category, y = total)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(x = \"Expense Category\", y = \"Total Amount Spent\", title = \"Expenses by Category\") +\n  theme_minimal()\nggplotly(expenses_plot1)\n\n\n\n\n\nFrom the chart above we realize that shelter accounts for the main category for expenditure. This is followed by recreation, food and education. Rent adjustment is on the negative end which may be a indication that the landlord in the city has overall lowered their rents.\n\n# Aggregate financial data by category and timestamp\nfinancial_data_agg <- finance %>%\n  filter(category != \"Wage\") %>%\n  group_by(category, timestamp) %>%\n  summarize(avg_amount = mean(amount))\n\n`summarise()` has grouped output by 'category'. You can override using the\n`.groups` argument.\n\n# Line chart of average amount by timestamp, colored by category\nline_chart <- ggplot(financial_data_agg, aes(x = timestamp, y = avg_amount, color = category)) +\n  geom_line() +\n  labs(x = \"Timestamp\", y = \"Average Amount\", title = \"Average Amount by Category over Time\") +\n  theme_minimal()\n\n# Display the chart\nggplotly(line_chart)\n\n\n\n\n\nFrom the above chart, we observe that mapping average amount for category by days in the time stamp is not visually pleasing to see any patterns. But still if we zoom in, we can get som info from it. That is we can see that there are some major fluctuation in shelter amount and rent adjustment in march and April. Education amount is incurred on first day of the month and that if we zoom in. We can see that recreation and food demonstrates a regular pattern as shown in the pic below\n[]recreation and food.png\nLets try to map above information in terms of months\n\n# Extract month from timestamp\nfinancial_data_agg <- finance %>%\n  filter(category != \"Wage\") %>%\n  mutate(month = format(timestamp, \"%Y-%m\")) %>%\n  group_by(participantId, category, month) %>%\n  summarize(total = sum(amount), .groups = \"drop\")\n\n# Calculate average amount spent by category per month\ncategory_month_avg <- financial_data_agg %>%\n  group_by(category, month) %>%\n  summarize(avg_amount = mean(total))\n\n`summarise()` has grouped output by 'category'. You can override using the\n`.groups` argument.\n\n# Create bar chart\ncategory_month_plot <- ggplot(category_month_avg, aes(x = month, y = avg_amount, fill = category)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Month\", y = \"Average Amount Spent\", title = \"Average Amount Spent by Category per Month\") +\n  theme_minimal()\n\nggplotly(category_month_plot)\n\n\n\n\n\nFrom the chart above we observe that the amount spent on average per category is indeed in the following order with education < food < recreation < shelter. We can also observe some anomalies in March and April. There is an exceeding large expenditure on shelter in march and in April the rent adjustment increased exceptionally as well. The expenditure in shelter may have being transferred to increase rent adjustment.\n\n\n\n\n\n\nNote\n\n\n\nSince not everyone in the city is a landlord / tenant. This chart only serve as a benchmark of average city resident."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#merged-visualization",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#merged-visualization",
    "title": "Take-home_Ex01",
    "section": "Merged visualization",
    "text": "Merged visualization\nNow lets see some visualizations after we merge these 2 files together\n\nfinancial_journal <- finance %>%\n  mutate(date = as.Date(timestamp))\n\n# Aggregate financial data by participantId and category\nagg_financial <- financial_journal %>%\n  group_by(participantId, category) %>%\n  summarize(total_spent = sum(amount), .groups = \"drop\")\n\n# Merge demographic data with aggregated financial data\nmerged_data <- part_info %>%\n  left_join(agg_financial, by = \"participantId\")\n\nwage agaist joviality\n\n# Subset merged_data to only include rows where category is \"wage\"\nwage_data <- merged_data %>% filter(category == \"Wage\")\n\n# Create scatterplot of wage vs. joviality\nggplotly(ggplot(wage_data, aes(x = total_spent, y = joviality)) +\n  geom_smooth() +\n  labs(title = \"Wage vs. Joviality\", x = \"Wage\", y = \"Joviality\")+ geom_point())\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nUsing the smooth tend line, we can observe that joviality generally decrease with incrasing wage. This may be because a higher wage may mean more responsibility and hence greater amount of stress which lead to lower joviality"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#non-useful-plots-that-were-explored",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html#non-useful-plots-that-were-explored",
    "title": "Take-home_Ex01",
    "section": "Non-useful plots that were explored",
    "text": "Non-useful plots that were explored\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nfinancial_journal <- finance %>%\n  mutate(date = as.Date(timestamp))\n\n# Aggregate financial data by participantId and category\nagg_financial <- financial_journal %>%\n  group_by(participantId, category) %>%\n  summarize(total_spent = sum(amount), .groups = \"drop\")\n\n# Merge demographic data with aggregated financial data\nmerged_data <- part_info %>%\n  left_join(agg_financial, by = \"participantId\")\n\n# Subset the merged data to only include the relevant variables for our correlation analysis.\ncor_data <- merged_data %>%\n  select(age, educationLevel, householdSize, haveKids, category, total_spent)\n\n#Convert educationLevel to a numeric variable for our correlation analysis, with higher levels of education represented by larger numbers.\ncor_data <- cor_data %>%\n  mutate(educationLevelNum = case_when(\n    educationLevel == \"Low\" ~ 1,\n    educationLevel == \"HighSchoolOrCollege\" ~ 2,\n    educationLevel == \"Bachelors\" ~ 3,\n    educationLevel == \"Graduate\" ~ 4\n  )) %>%\n  mutate(haveKidsNum = as.integer(haveKids)) %>%\n  select(-educationLevel, -haveKids)\n\nggpairs(cor_data, columns = c(\"age\", \"educationLevelNum\", \"householdSize\", \"haveKidsNum\", \"total_spent\"),\n        mapping = aes(color = category),\n        lower = list(continuous = \"smooth\"), diag = list(continuous = \"bar\"),\n        upper = list(continuous = wrap(\"cor\", method = \"pearson\")),\n        title = \"Correlation between Demographic Characteristics and Financial Behaviors\")\n\nWarning in check_and_set_ggpairs_defaults(\"diag\", diag, continuous =\n\"densityDiag\", : Changing diag$continuous from 'bar' to 'barDiag'\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning in cor(x, y): the standard deviation is zero\n\n\nWarning in cor(x, y): the standard deviation is zero\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning in cor(x, y): the standard deviation is zero\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# Create scatterplot of total spent vs. household size\nggplot(merged_data, aes(x = householdSize, y = total_spent, color = haveKids)) +\n  geom_point() +\n  labs(title = \"Total Spent vs. Household Size\", x = \"Household Size\", y = \"Total Spent\", color = \"Have Kids\")"
  }
]